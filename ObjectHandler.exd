import hbp_nrp_excontrol.nrp_states as states
from smach import StateMachine
from smach.state import State

from gazebo_msgs.srv import ApplyBodyWrench, GetModelState, DeleteModel, SpawnEntity, SpawnEntityRequest
from geometry_msgs.msg import Wrench, Vector3, Point
from std_msgs.msg import Float32, String
import rospy
from rospy import ServiceProxy, wait_for_service
from hbp_nrp_excontrol.logs import clientLogger

FINISHED = 'FINISHED'
ERROR = 'ERROR'
PREEMPTED = 'PREEMPTED'

sm = StateMachine(outcomes=[FINISHED, ERROR, PREEMPTED])

import hbp_nrp_excontrol.nrp_states as states

cylinder_name = "cylinder"
cylinder_sdf_xml = """
<?xml version='1.0'?>
<sdf version='1.5'>
  <model name='{cylinder_name}'>
    <pose frame="">-0.37797 -0.25321 1.12015 0 0 0</pose>
    <static>0</static>
    <link name='{cylinder_name}'>
      <pose frame="">0 0 0 0 0 0</pose>
      <inertial>
        <mass>0.1</mass>
        <inertia>
          <ixx>0.000129</ixx>
          <ixy>0</ixy>
          <ixz>0</ixz>
          <iyy>0.000129</iyy>
          <iyz>0</iyz>
          <izz>3.78e-05</izz>
        </inertia>
      </inertial>
      <collision name="collision">
        <geometry>
          <cylinder>
            <radius>0.0275</radius>
            <length>0.115</length>
          </cylinder>
        </geometry>
        <max_contacts>10</max_contacts>
        <surface>
          <contact>
            <ode/>
          </contact>
          <bounce/>
          <friction>
            <torsional>
              <ode/>
            </torsional>
            <ode/>
          </friction>
        </surface>
      </collision>
      <visual name="visual">
        <geometry>
          <cylinder>
            <radius>0.0275</radius>
            <length>0.115</length>
          </cylinder>
        </geometry>
        <material>
          <script>
            <uri>file://media/materials/scripts/gazebo.material</uri>
            <name>Gazebo/Blue</name>
          </script>
        </material>
      </visual>
      <self_collide>0</self_collide>
      <kinematic>0</kinematic>
      <gravity>1</gravity>
    </link>
  </model>
</sdf>
"""
    
class ResetState(State):
    def __init__(self, cylinder_name, sdf_xml, rate=1., outcomes=['success', 'aborted'], max_duration=2):
        super(ResetState, self).__init__(outcomes=outcomes)
        self._cylinder_name = cylinder_name
        self._spawn_proxy = rospy.ServiceProxy('/gazebo/spawn_sdf_entity',
                                               SpawnEntity, persistent=True)
        self._cylinder_msg = SpawnEntityRequest()
        self._cylinder_msg.entity_name = self._cylinder_name
        self._cylinder_msg.entity_xml = sdf_xml.format(cylinder_name=cylinder_name)
        self._cylinder_msg.initial_pose.position.x = -0.37797
        self._cylinder_msg.initial_pose.position.y = -0.25321
        self._cylinder_msg.initial_pose.position.z = 1.12015
        self._cylinder_msg.reference_frame = "world"

        self._delete_proxy = ServiceProxy('/gazebo/delete_model',
                                         DeleteModel, persistent=True)
        
        self._robot_topic = rospy.Publisher('/arm_robot/arm_commands', String, queue_size=10)
        self.max_duration=max_duration
        self._rate = rospy.Rate(rate)

    def execute(self, userdata):
        self._spawn_proxy(self._cylinder_msg)
        start_time = rospy.Time.now()
        clientLogger.info("Sending RESET")
        self._robot_topic.publish(String("RESET"))
        while (rospy.Time.now() - start_time) < rospy.Duration(self.max_duration):
            self._rate.sleep()
        clientLogger.info("Changing to preparation state")
        self._delete_proxy(self._cylinder_name)
        self._spawn_proxy(self._cylinder_msg)
        return 'success'
      
        
class PrepareState(State):
    def __init__(self, rate=1., outcomes=['success', 'aborted'], max_duration=2):
        super(PrepareState, self).__init__(outcomes=outcomes)
        self._rate = rospy.Rate(rate)
        self._robot_topic = rospy.Publisher('/arm_robot/arm_commands', String, queue_size=10)
        self.max_duration=max_duration

    def execute(self, userdata):
        start_time = rospy.Time.now()
        clientLogger.info("Sending PREPARE")
        self._robot_topic.publish(String("PREPARE"))
        while (rospy.Time.now() - start_time) < rospy.Duration(self.max_duration):
            self._rate.sleep()
        clientLogger.info("Changing to hit state")
        return 'success'


class GraspState(State):
    def __init__(self, num, rate=1., outcomes=['success', 'aborted'], max_duration=1):
        super(GraspState, self).__init__(outcomes=outcomes)
        self._rate = rospy.Rate(rate)
        self.num = num
        self._robot_topic = rospy.Publisher('/arm_robot/arm_commands', String, queue_size=10)
        self.max_duration=max_duration

    def execute(self, userdata):
        start_time = rospy.Time.now()
        clientLogger.advertise("Sending GRASP{}".format(self.num))
        self._robot_topic.publish(String("GRASP{}".format(self.num)))
        while (rospy.Time.now() - start_time) < rospy.Duration(self.max_duration):
            self._rate.sleep()
        clientLogger.info("Changing state")
        return 'success'

class ThrowState(State):
    def __init__(self, rate=1., outcomes=['success', 'aborted'], max_duration=0.001):
        super(ThrowState, self).__init__(outcomes=outcomes)
        self._rate = rospy.Rate(rate)
        self._robot_topic = rospy.Publisher('/arm_robot/arm_commands', String, queue_size=10)
        self.max_duration=max_duration

    def execute(self, userdata):
        start_time = rospy.Time.now()
        clientLogger.advertise("Sending THROW")
        self._robot_topic.publish(String("THROW"))
        while (rospy.Time.now() - start_time) < rospy.Duration(self.max_duration):
            self._rate.sleep()
        clientLogger.info("Changing state")
        return 'success'

class EndState(State):
    def __init__(self, cylinder_name, rate=1., outcomes=['success', 'aborted'], max_hit_duration=2):
        super(EndState, self).__init__(outcomes=outcomes)
        self._rate = rospy.Rate(rate)
        self._cylinder_name = cylinder_name
        self._state_proxy = ServiceProxy('/gazebo/get_model_state',
                                         GetModelState, persistent=True)
        self._delete_proxy = ServiceProxy('/gazebo/delete_model',
                                         DeleteModel, persistent=True)
        self._distance_topic = rospy.Publisher('/cylinder_distance', Float32, queue_size=10)
        self.max_hit_duration=max_hit_duration
        self._robot_topic = rospy.Publisher('/arm_robot/arm_commands', String, queue_size=10)

    def execute(self, userdata):
        start_time = rospy.Time.now()
        clientLogger.advertise("Sending END")
        self._robot_topic.publish(String("END"))
        while not self.cylinder_lower_than(0.2):
            if (rospy.Time.now() - start_time) >= rospy.Duration(self.max_hit_duration):
                break
            self._rate.sleep()
        cylinder_pos = self.get_cylinder_distance()
        clientLogger.advertise("Cylinder distance: {}".format(cylinder_pos))
        self._distance_topic.publish(Float32(cylinder_pos))
        self._delete_proxy(self._cylinder_name)
        return 'success'

    def get_cylinder_distance(self):
      try:
          current_cylinder_state = self._state_proxy(cylinder_name, "world")
      except rospy.ServiceException as exc:
          clientLogger.error(str(exc))
          return -1000.0
      return -current_cylinder_state.pose.position.y

    def cylinder_lower_than(self, z_threshold):
        try:
            current_cylinder_state = self._state_proxy(cylinder_name, "world")
        except rospy.ServiceException as exc:
            clientLogger.info(str(exc))
            return False
        return current_cylinder_state.pose.position.z < z_threshold
    
    
with sm:
    StateMachine.add(
      "reset_cylinder",
      ResetState(cylinder_name, cylinder_sdf_xml),
      transitions = {"success": "prepare",
                     "aborted": ERROR}
    )
    StateMachine.add(
      "prepare",
      PrepareState(),
      transitions = {"success": "grasp2",
                     "aborted": ERROR}
    )
    StateMachine.add(
      "grasp1",
      GraspState(1),
      transitions = {"success": "grasp2",
                     "aborted": ERROR}
    )
    StateMachine.add(
      "grasp2",
      GraspState(2),
      transitions = {"success": "end",
                     "aborted": ERROR}
    )
    StateMachine.add(
      "throw",
      ThrowState(),
      transitions = {"success": "end",
                     "aborted": ERROR}
    )
    StateMachine.add(
      "end",
      EndState(cylinder_name),
      transitions = {"success": "reset_cylinder",
                     "aborted": ERROR}
)